name: Package Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install linux dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential python3-dev libcairo2-dev libpango1.0-dev ffmpeg
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements_dev.txt
          python -m pip install .
      - name: Analysing the code with pylint
        run: |
          python -m pylint $(git ls-files '*.py')
      - name: Test with pytest
        run: |
          python -m pytest -v

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
      - name: Build package
        run: |
          python -m build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: |
            dist/*.whl
            dist/*.tar.gz
      - name: Sanity check
        run: |
          ls -a dist/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_ENV
      - name: Extract tag version
        id: get_tag_version
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "tag_version=$TAG" >> $GITHUB_ENV
      - name: Verify version matches tag
        run: |
          if [ "${{ env.version }}" != "${{ env.tag_version }}" ]; then
            echo "Version in pyproject.toml (${{ env.version }}) does not match tag (${{ env.tag_version }})"
            exit 1
          fi
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist
      - name: Sanity check builds
        run: |
          ls -a dist/
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ArrayViz ${{ env.version }}
          body: |
            I am pleased to announce the release of ArrayViz ${{ env.version }}.

            ArrayViz ${{ env.version }} supports Python 3.8 and higher.

            The release will be available via PyPI:

            ```python
            python -m pip install --upgrade arrayviz
            ```

            Please report any issues with the release on the issue tracker.
          files: dist/*.tar.gz
          draft: true
          prerelease: true
          fail_on_unmatched_filesv: true
          make_latest: true
